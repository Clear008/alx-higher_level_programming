The ``1-my_list`` module
======================

Using ``MyList``
-------------------

Importing the function from the module:
        >>> MyList = __import__("1-my_list").MyList

Checking for module docstring:
         >>> m = __import__("1-my_list").__doc__
         >>> len(m) > 1
         True

Checking for class docstring:
         >>> c = __import__("1-my_list").MyList.__doc__
         >>> len(c) > 1
         True

Checking for method docstring:
	 >>> mod = __import__("1-my_list").MyList.print_sorted.__doc__
	 >>> len(mod) > 1
	 True

checking that MyList inherits from list:
	  >>> issubclass(MyList, list)
	  True

checking that appendng works:
	  >>> list.append(2)
	  >>> list.append(1)
	  >>> list.append(4)
	  >>> list.append(3)
	  >>> print(list)
	  [1, 2, 3, 4]

checking for list already in correct order:
	  >>> list.print_sorted()
	  [1, 2, 3, 4]

checking for reversed order list:
	  >>> list = MyList()
	  >>> list.append(4)
	  >>> list.append(3)
	  >>> list.append(2)
	  >>> list.append(1)
	  >>> print(list)
	  [4, 3, 2, 1]
	  >>> list.print_sorted()
	  [1, 2, 3, 4]
	  >>> print(list)
	  [4, 3, 2, 1]

checking negative number:
	  >>> list.append(-1)
	  >>> list.append(5)
	  >>> print(list)
	  [4, 3, 2, 1, -1, 5]
	  >>> list.print_sorted()
	  [-1, 1, 2, 3, 4, 5]
	  >>> print(list)
	  [4, 3, 2, 1, -1, 5]

checking too many arguments:
	  >>> list.print_sorted(1)
	  Traceback (most recent call last):
	  ...
	  TypeError: print_sorted() takes 1 positional argument but 2 were given

checking an empty list:
	  >>> list = MyList()
	  >>> list.print_sorted()
	  []

